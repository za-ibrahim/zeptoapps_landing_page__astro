---
import { Image } from "astro:assets";
import diamond from "../assets/diamond.webp";
import rocket from "../assets/rocket.webp";
import rating from "../assets/customer-satisfaction.webp";

const stats = [
  {
    count: "110K+",
    label: "Merchants Served",
    icon: rocket,
    className: "",
  },
  {
    count: "900+",
    label: "Positive Reviews",
    icon: rating,
    className: "",
  },
  {
    count: "$3.5B+",
    label: "Sales Impact",
    icon: diamond,
    className: "",
  },
];

import ComponentLayout from "../layouts/ComponentLayout.astro";
---

<section
  class="stats-section py-28 mx-auto md:!mt-22 mt-0"
  aria-label="Statistics Section"
>
  <ComponentLayout class="">
    <h1 class="text-center mb-4 md:text-5xl sm:text-4xl text-3xl font-bold">
      Our Impact in Numbers
    </h1>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 pt-5">
      {
        stats.map(({ count, label, className, icon }) => (
          <div
            class={`shadow-box h-[280px] md:min-h-[360px] bg-white ${className}`}
          >
            <Image
              class="icon w-15 h-15 mb-5"
              width={60}
              height={60}
              src={icon}
              alt={label}
            />
            <span class="mg:text-8xl md:text-7xl text-6xl font-bold relative z-10">
              {count}
            </span>
            <span class="mt-4 md:text-2xl text-xl font-medium text-center relative z-10">
              {label}
            </span>
          </div>
        ))
      }
    </div>
  </ComponentLayout>
</section>

<!-- <script>
  const ANIMATION_DURATION = 2000;

  // Add 'any' type to silence TypeScript errors while keeping the functionality
  const easeOutExpo = (x: any) => (x === 1 ? 1 : 1 - Math.pow(2, -10 * x));

  function animateCount(el: any, end: any, duration = ANIMATION_DURATION) {
    let start = 0;
    let startTime: any = null;

    function animate(timestamp: any) {
      if (startTime === null) startTime = timestamp;
      const progress = Math.min((timestamp - startTime) / duration, 1);
      const easedProgress = easeOutExpo(progress);
      const currentValue = Math.floor(easedProgress * (end - start) + start);

      el.textContent = currentValue.toLocaleString();

      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        el.textContent = end.toLocaleString();
      }
    }

    requestAnimationFrame(animate);
  }

  function initStatsCount() {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const el = entry.target;
            const dataCount = el.getAttribute("data-count");
            if (dataCount !== null) {
              const end = parseInt(dataCount, 10);
              if (!isNaN(end)) {
                animateCount(el, end);
              }
            }
            observer.unobserve(el);
          }
        });
      },
      {
        threshold: 0.2,
        rootMargin: "50px",
      }
    );

    document.querySelectorAll(".stat-count").forEach((el) => {
      observer.observe(el);
    });
  }

  // Initialize on page load and view transitions
  window.addEventListener("astro:after-swap", initStatsCount);
  window.addEventListener("DOMContentLoaded", initStatsCount);

  // Add mouse movement effect
  document.querySelectorAll(".stat-card").forEach((card) => {
    card.addEventListener("mousemove", (e: any) => {
      if (window.matchMedia("(prefers-reduced-motion: reduce)").matches) return;

      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      (card as any).style.setProperty("--mouse-x", `${x}px`);
      (card as any).style.setProperty("--mouse-y", `${y}px`);
    });
  });
</script> -->

<style>
  .stats-section {
    transition: box-shadow 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    /* backdrop-filter: blur(8px); */
    /* border: 1px solid rgba(255, 255, 255, 0.05); */
  }

  .stats-section::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    /* background: linear-gradient(
      90deg,
      transparent,
      --alpha(var(--color-primary) / 0.5),
      var(--color-secondary),
      --alpha(var(--color-primary) / 0.5),
      transparent
    ); */
  }
  .stats-section::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      --alpha(var(--color-primary) / 0.5),
      var(--color-secondary),
      --alpha(var(--color-primary) / 0.5),
      transparent
    );
  }

  .stat-card {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 0px 5px rgb(211, 210, 210);
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.747);
  }

  .stat-card::before {
    content: "";
    position: absolute;
    inset: 0;
    background: radial-gradient(
      800px circle at var(--mouse-x, center) var(--mouse-y, center),
      rgba(255, 255, 255, 0.1),
      transparent 40%
    );
    opacity: 0;
    transition: opacity 0.5s;
  }

  .stat-card:hover::before {
    opacity: 1;
  }

  .stat-card .icon {
    filter: drop-shadow(0 0 12px rgba(255, 255, 255, 0.4));
    transition: all 0.4s ease;
  }

  .stat-card:hover .icon {
    transform: scale(1.2) rotate(8deg);
    filter: drop-shadow(0 0 16px rgba(255, 255, 255, 0.6));
  }

  .stat-card:hover {
    /* transform: translateY(-8px) scale(1.02); */
    box-shadow:
      0 20px 48px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.15);
  }

  .shadow-box {
    padding: 2rem;
    border-radius: 10px;
    box-shadow:
      0 10px 20px rgba(0, 0, 0, 0.2),
      /* strong shadow underneath */ 0 6px 6px rgba(0, 0, 0, 0.01),
      /* mid-level shadow */ inset 0 -2px 6px rgba(0, 0, 0, 0.2),
      /* inner bottom shading */ inset 0 2px 6px rgba(255, 255, 255, 0.6); /* inner top highlight */
    color: #333;
    display: flex;
    font-size: 1.3rem;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    font-family: sans-serif;
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
  }

  /* Optional: On hover, pop out more */
  .shadow-box:hover {
    transform: translateY(-2px);
  }

  @media (prefers-reduced-motion: reduce) {
    .stats-section,
    .stat-card,
    .stat-card::before,
    .stat-card .icon {
      transition: none;
    }

    .stat-card:hover {
      transform: none;
    }

    .stat-card:hover .icon {
      transform: none;
      filter: none;
    }
  }
</style>
